let getComponent;(()=>{"use strict";var t={637:function(t,e,s){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(863),a=i(s(123)),n=i(s(323)),o=i(s(300)),l=i(s(317)),d=i(s(313)),u="Alter Time Healing",h=new d.default(false),f=342246,c=342247;function g(t,e,s){const i=(0,r.eventsByCategoryAndDisposition)(t,"casts","friendly");for(const t of i)if(t.ability&&t.ability.id===c&&t.source&&t.source.idInReport===e.idInReport&&t.timestamp===s)return!0;return!1}e.default=getComponent=()=>{if(1!==reportGroup.fights.length)return(0,o.default)(u,"Please select a single fight");const t=reportGroup.fights[0];if(0===t.combatantInfoEvents.length)return(0,o.default)(u,"Sadly this component relies on real encounters and won't work with trash fights.");if(1!==t.combatantInfoEvents.length)return(0,o.default)(u,"Please select a single <Mage>");const e=t.combatantInfoEvents[0].source;if(!e||"Mage"!==e.subType)return(0,o.default)(u,"Please select a single <Mage>");const s=function(t,e){const s=(0,r.eventsByCategoryAndDisposition)(t,"aurasGained","friendly"),i=new a.default(s,{sourceFilters:[{idInReport:e.idInReport}],auraIds:new Set([f]),captureEvent:!0});h.addMessage("BuffManager",i);const o=(0,r.eventsByCategoryAndDisposition)(t,"healing","friendly"),d=(0,r.eventsByCategoryAndDisposition)(t,"damage","enemy"),u=new n.default([o,d],h,{targetFilters:[{idInReport:e.idInReport}]});if(!i.actors[e.id]||!i.actors[e.id].targets[e.id]||!i.actors[e.id].targets[e.id].buffs[342246])return[];const c=i.actors[e.id].targets[e.id].buffs[342246].sortedTimeSpans,p=[];let m=0;for(const[s,i]of c){let r=u.getHealth(e.idInReport,s,"before");const a=u.getHealth(e.idInReport,i,"before");h.addMessage("AT",{startHealth:r,endHealth:a,start:s,end:i});if(Math.round(i/1e3)-Math.round(s/1e3)<10&&!g(t,e,i)){h.addMessage("canceled",`AT Skipped at ${(0,l.default)(i-t.startTime)}, ${s} - ${i}`);continue}const n=r-a;m+=n;const o=n>=0?n+"":`<span style='color:red'>${n}</span>`,d=(0,l.default)(i-t.startTime),f=n>=0?d+"":`<span style='color:red'>${d}</span>`;p.push({timestamp:f,amount:o})}const y=m>=0?`<span style='font-weight: bold'>${m}</span>`:`<span style='color:red; font-weight: bold'>${m}</span>`,v=m>=0?"<span style='font-weight: bold'>overall</span>":"<span style='color:red; font-weight: bold'>overall</span>";return p.push({timestamp:v,amount:y}),p}(t,e),i={component:"EnhancedMarkdown",props:{content:`\n# ${u}\n<Mage>${e.name}</Mage> did not use <AbilityIcon id={ALTER_TIME_ID} icon="spell_mage_altertime.jpg">Alter Time</AbilityIcon> or all usages got canceled.\n`}};if(0===s.length)return i;return{component:"Table",props:{columns:{title:{header:`<a href="https://www.wowhead.com/spell=342245">Alter Time</a> Healing Done by <Mage>${e.name}</Mage>`,columns:{timestamp:{header:"Timestamp",textAlign:"center"},amount:{header:"Amount",textAlign:"center"}}}},data:s}}}},313:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this.messages=[],this.debug=t}addMessage(t,e){if(!this.debug)return;const s={};s[t]=e,this.messages.push(s)}}},123:function(t,e,s){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Aura=void 0;const r=i(s(561));e.default=class{constructor(t,e={}){this.actors={};for(const s of t){if(!s.ability||!s.target||!s.source)continue;if(s.type.includes("stack"))continue;if("Pet"===s.target.type)continue;if("friendly"!==s.targetDisposition)continue;if(e.auraIds&&!e.auraIds.has(s.ability.id))continue;if(e.fight&&e.fight.isEventExcludedFromDamageRankings(s))continue;if(e.targetFilters&&(0,r.default)(s.target,e.targetFilters))continue;if(e.sourceFilters&&(0,r.default)(s.source,e.sourceFilters))continue;if(e.abilityFilters&&(0,r.default)(s.ability,e.abilityFilters))continue;const t=new a(s.source.id),i=new n(s.target.id),l=new o(s.ability.id);s.type.includes("apply")?this.addActor(t).addTarget(i).addBuff(l).buffApplied(s,e.captureEvent):s.type.includes("remove")&&this.addActor(t).addTarget(i).addBuff(l).buffRemoved(s,e.captureEvent)}}addActor(t){return this.actors[t.id]?this.actors[t.id]:(this.actors[t.id]=t,t)}getAurasBySourceActor(t){if(this.actors[t])return this.actors[t]}getSelfBuff(t,e){return this.actors[t].targets[t].buffs[e]}};class a{constructor(t){this.targets={},this.id=t}addTarget(t){return this.targets[t.id]?this.targets[t.id]:(this.targets[t.id]=t,t)}}class n{constructor(t){this.buffs={},this.id=t}addBuff(t){return this.buffs[t.id]?this.buffs[t.id]:(this.buffs[t.id]=t,t)}}class o{constructor(t){this.applied=[],this.removed=[],this.events={},this.id=t}buffApplied(t,e=!1){this.applied.push(t.timestamp),e&&(this.events[t.timestamp]=t)}buffRemoved(t,e=!1){this.removed.push(t.timestamp),e&&(this.events[t.timestamp]=t)}get appliedTimings(){return this.applied}get removedTimings(){return this.removed}get sortedTimeSpans(){if(this._sortedTimes)return JSON.parse(JSON.stringify(this._sortedTimes));for(this.applied=Array.from(new Set(this.applied)),this.removed=Array.from(new Set(this.removed));this.applied.length<this.removed.length;)this.applied.unshift(0);for(this.applied.sort(((t,e)=>t-e));this.removed.length<this.applied.length;)this.removed.push(1/0);return this.removed.sort(((t,e)=>t-e)),this._sortedTimes=Array.from(Array(Math.max(this.applied.length,this.removed.length)),((t,e)=>[this.applied[e]?this.applied[e]:0,this.removed[e]?this.removed[e]:1/0])),JSON.parse(JSON.stringify(this._sortedTimes))}isTimeInTimeSpans(t){let e=0,s=this.sortedTimeSpans.length-1;for(;e<=s;){const i=Math.floor((e+s)/2),[r,a]=this.sortedTimeSpans[i];if(t>=r&&t<=a)return!0;t<r?s=i-1:e=i+1}return!1}getFullDuration(t){let e=0;const s=this._sortedTimes?this._sortedTimes:this.sortedTimeSpans;for(const i of s){let[s,r]=i;null!=s||(s=t.startTime),null!=r||(r=t.endTime),e+=r-s}return e}}e.Aura=o},323:function(t,e,s){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=i(s(561));e.default=class{constructor(t,e,s={}){this.targets=new Map,this.options=s,this.logger=e,this.logger.addMessage("Events in Health Manager",t);for(const e of t)for(const t of e){if(!t.targetResources||!t.target)continue;if(s.targetFilters&&(0,r.default)(t.target,s.targetFilters))continue;if(s.sourceFilters&&(0,r.default)(t.source,s.sourceFilters))continue;if(s.abilityFilters&&(0,r.default)(t.ability,s.abilityFilters))continue;this.addTarget(new a(t.target.name,t.target.idInReport,this.logger)).addHealth(t)}for(const t of this.targets)t[1].sortHealth()}addTarget(t){const e=this.targets.get(t.id);return e||(this.targets.set(t.id,t),t)}getHealth(t,e,s){const i=this.targets.get(t);if(!i)return 1/0;const r=i.getHealth(e,s);return r||1/0}};class a{constructor(t,e,s){this.maxHealth=0,this.health=new Map,this.name=t,this.id=e,this.logger=s}sortHealth(){this.health=new Map([...this.health.entries()].sort())}addHealth(t){if(!t.target||!t.targetResources)return;let e=t.targetResources.hitPoints;if("damage"===t.type){if(e-=t.amount,e<=0)return;this.health.set(t.timestamp+1,e)}"heal"===t.type?(e+=t.amount,this.health.set(t.timestamp+1,e)):this.health.set(t.timestamp,e),this.maxHealth=t.targetResources.maxHitPoints}getHealth(t,e){this.logger.addMessage("Checking health at",{timestamp:t,health:Object.fromEntries(this.health)});const s=this.health.get(t);if(s)return s;if(0===this.health.size)return null;let i=null,r=null;if("before"===e){i=this.maxHealth;for(const[e,s]of this.health){if(e>t){this.logger.addMessage("broke with",{breakTime:e,currentTime:r});break}r=e,i=s}return this.logger.addMessage("returned health",{currentTime:r,currentHealth:i,timestamp:t}),i}if("after"===e){for(const[e,s]of this.health)if(i=s,r=e,e>t)break;return this.logger.addMessage("returned health",{currentTime:r,currentHealth:i,timestamp:t}),i}return this.getClosestHealth(t)}getClosestHealth(t){let e=null,s=1/0,i=null;for(const[r,a]of this.health){null!=e||(e=a);const n=Math.abs(r-t);if(!(n<=s))break;e=a,s=n,i=r}return this.logger.addMessage("returned health",{currentTime:i,currentHealth:e,timestamp:t}),e}}},561:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>{for(const s of e)for(const e in s)if(t[e]!==s[e])return!0}},300:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return{component:"EnhancedMarkdown",props:{content:`\n<u># ${t} Error</u>\n${e}\n`}}}},317:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return`${Math.floor(t/6e4)}:${Math.round(t%6e4/1e3)}`}},863:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.allEventsByCategoryAndDisposition=e.eventsByCategoryAndDisposition=void 0,e.eventsByCategoryAndDisposition=function(t,e,s){return t.eventsByCategoryAndDisposition(e,s)},e.allEventsByCategoryAndDisposition=function(t,e,s){return t.allEventsByCategoryAndDisposition(e,s)}}},e={};var s=function s(i){var r=e[i];if(void 0!==r)return r.exports;var a=e[i]={exports:{}};return t[i].call(a.exports,a,a.exports,s),a.exports}(637);globalThis.getComponent=s.default})();
 /*Source Code LZString compressed, Base64 encoded 
=
*/