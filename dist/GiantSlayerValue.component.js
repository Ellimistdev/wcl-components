let getComponent;(()=>{"use strict";var e={35:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(300)),r=s(i(123)),a=i(863),o=s(i(313)),d=i(245),u="Mastery: Giant Slayer Value",l=375087,c={},f=new Set([361500,370452,357212,357209,359077,356995,362969,353759,1,368847,382411]),p=357210,h='<AbilityIcon id={376888} icon="ability_evoker_dragonrage2.jpg">Tyranny</AbilityIcon>',g='<AbilityIcon id={362980} icon="ability_evoker_masterygiantkiller.jpg">Mastery: Giant Slayer</AbilityIcon>',m=new o.default(false);function y(e){if(!e.source)throw new Error("Combatant Info Event was incomplete");if(c[e.source.idInReport])return c[e.source.idInReport];const t=e.talentTree.find((e=>376888===e.spellId));return c[e.source.idInReport]=!!t,c[e.source.idInReport]}m.addMessage("HasTyranny",c),t.default=getComponent=()=>{if(1!==reportGroup.fights.length)return(0,n.default)(u,"Please select a single fight");const e=reportGroup.fights[0];if(0===e.combatantInfoEvents.length)return(0,n.default)(u,"Sadly this component relies on real encounters and won't work with trash fights.");if(1!==e.combatantInfoEvents.length)return(0,n.default)(u,"Please select a single <Evoker>Devastation Evoker</Evoker>");const t=e.combatantInfoEvents[0].source;if(!t||"Devastation"!==e.specForPlayer(t))return(0,n.default)(u,"Please select a single <Evoker>Devastation Evoker</Evoker>");const i=(0,a.eventsByCategoryAndDisposition)(e,"aurasGained","friendly"),s=new r.default(i,{sourceFilters:[{idInReport:t.idInReport}],auraIds:new Set([l])}),o=function(e,t,i){if(!t.source)throw new Error("Combatant Source was missing");const s=i.getSelfBuff(t.source.idInReport,l),n=new d.IsInTimeSpan(s);m.addMessage("dragonRageBuff",s.sortedTimeSpans);const r=[];for(const i of e){if(!i.source||!i.ability||!i.targetResources)continue;if(i.source.idInReport!==t.source.idInReport)continue;if(!i.amount)continue;if(!f.has(i.ability.id))continue;const e=i.targetResources.hitPoints/i.targetResources.maxHitPoints,s=i.ability.id===p,a=i.amount,o=n.isInTimeSpan(i.timestamp);r.push({healthPercent:e,damageDone:a,hasDragonrage:o,isDeepBreath:s,timestamp:i.timestamp})}return r}((0,a.eventsByCategoryAndDisposition)(e,"damage","friendly"),e.combatantInfoEvents[0],s);m.addMessage("damageSummaries",o);let c=0,v=0,b=0;const T=(e.combatantInfoEvents[0].stats.mastery/72+22.5)/100;m.addMessage("masteryPercent",T);for(const t of o){if(y(e.combatantInfoEvents[0])&&(t.hasDragonrage||t.isDeepBreath)){c+=1;let e=t.damageDone/(1+T)*(T*t.healthPercent+1);b+=t.damageDone-e}else c+=t.healthPercent;v+=t.healthPercent}m.addMessage("hasTyranny",y(e.combatantInfoEvents[0])),m.addMessage("damageGainByTyranny",b);const S=b/((e.endTime-e.startTime)/1e3);m.addMessage("dpsGain",S),v/=o.length;const I=(100*v).toFixed(2);m.addMessage("averageMasteryValue",v),c/=o.length;const _=(100*c).toFixed(2);m.addMessage("averageMasteryValueWithTyranny",c);const E=(100*T).toFixed(2),M=(v*T*100).toFixed(2),A=(c*T*100).toFixed(2),D=s.getSelfBuff(t.idInReport,l).getFullDuration(e);return{component:"EnhancedMarkdown",props:{content:`\n# <u>${u} for <Evoker>${t.name}</Evoker></u>\nOn average ${_}% (${I}% without ${h}) of ${g} got applied.\n\nWith your Mastery of ${e.combatantInfoEvents[0].stats.mastery.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")} (${E}%) and <AbilityIcon id=375087 icon='ability_evoker_dragonrage.jpg'>Dragon Rage</AbilityIcon> duration of ${(D/1e3).toFixed(0)} seconds ${h} gained you ${S.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g,",")} DPS, assuming your mastery did not change during the Encounter.\n\nOverall ${g} increased your damage by roughly ${A}% (${M}%).\n`}}}},313:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.messages=[],this.debug=e}addMessage(e,t){if(!this.debug)return;const i={};i[e]=t,this.messages.push(i)}}},123:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Aura=void 0;const n=s(i(561));t.default=class{constructor(e,t={}){this.actors={};for(const i of e){if(!i.ability||!i.target||!i.source)continue;if(i.type.includes("stack"))continue;if("Pet"===i.target.type)continue;if("friendly"!==i.targetDisposition)continue;if(t.auraIds&&!t.auraIds.has(i.ability.id))continue;if(t.fight&&t.fight.isEventExcludedFromDamageRankings(i))continue;if(t.targetFilters&&(0,n.default)(i.target,t.targetFilters))continue;if(t.sourceFilters&&(0,n.default)(i.source,t.sourceFilters))continue;if(t.abilityFilters&&(0,n.default)(i.ability,t.abilityFilters))continue;const e=new r(i.source.id),s=new a(i.target.id),d=new o(i.ability.id);i.type.includes("apply")?this.addActor(e).addTarget(s).addBuff(d).buffApplied(i,t.captureEvent):i.type.includes("remove")&&this.addActor(e).addTarget(s).addBuff(d).buffRemoved(i,t.captureEvent)}}addActor(e){return this.actors[e.id]?this.actors[e.id]:(this.actors[e.id]=e,e)}getAurasBySourceActor(e){if(this.actors[e])return this.actors[e]}getSelfBuff(e,t){return this.actors[e].targets[e].buffs[t]}};class r{constructor(e){this.targets={},this.id=e}addTarget(e){return this.targets[e.id]?this.targets[e.id]:(this.targets[e.id]=e,e)}}class a{constructor(e){this.buffs={},this.id=e}addBuff(e){return this.buffs[e.id]?this.buffs[e.id]:(this.buffs[e.id]=e,e)}}class o{constructor(e){this.applied=[],this.removed=[],this.events={},this.id=e}buffApplied(e,t=!1){this.applied.push(e.timestamp),t&&(this.events[e.timestamp]=e)}buffRemoved(e,t=!1){this.removed.push(e.timestamp),t&&(this.events[e.timestamp]=e)}get appliedTimings(){return this.applied}get removedTimings(){return this.removed}get sortedTimeSpans(){if(this._sortedTimes)return JSON.parse(JSON.stringify(this._sortedTimes));for(this.applied=Array.from(new Set(this.applied)),this.removed=Array.from(new Set(this.removed));this.applied.length<this.removed.length;)this.applied.unshift(0);for(this.applied.sort(((e,t)=>e-t));this.removed.length<this.applied.length;)this.removed.push(1/0);return this.removed.sort(((e,t)=>e-t)),this._sortedTimes=Array.from(Array(Math.max(this.applied.length,this.removed.length)),((e,t)=>[this.applied[t]?this.applied[t]:0,this.removed[t]?this.removed[t]:1/0])),JSON.parse(JSON.stringify(this._sortedTimes))}isTimeInTimeSpans(e){let t=0,i=this.sortedTimeSpans.length-1;for(;t<=i;){const s=Math.floor((t+i)/2),[n,r]=this.sortedTimeSpans[s];if(e>=n&&e<=r)return!0;e<n?i=s-1:t=s+1}return!1}getFullDuration(e){let t=0;const i=this._sortedTimes?this._sortedTimes:this.sortedTimeSpans;for(const s of i){let[i,n]=s;null!=i||(i=e.startTime),null!=n||(n=e.endTime),t+=n-i}return t}}t.Aura=o},245:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IsInTimeSpan=void 0;t.IsInTimeSpan=class{constructor(e){this.timeSpans=e.sortedTimeSpans,this.currentTimeSpan=this.timeSpans.shift()}isInTimeSpan(e){if(!this.currentTimeSpan)return!1;let t=this.currentTimeSpan[0];null!=t||(t=0);let i=this.currentTimeSpan[1];return null!=i||(i=1/0),e>i?(this.currentTimeSpan=this.timeSpans.shift(),this.isInTimeSpan(e)):e>=t&&e<=i}}},561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{for(const i of t)for(const t in i)if(e[t]!==i[t])return!0}},300:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return{component:"EnhancedMarkdown",props:{content:`\n<u># ${e} Error</u>\n${t}\n`}}}},863:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.allEventsByCategoryAndDisposition=t.eventsByCategoryAndDisposition=void 0,t.eventsByCategoryAndDisposition=function(e,t,i){return e.eventsByCategoryAndDisposition(t,i)},t.allEventsByCategoryAndDisposition=function(e,t,i){return e.allEventsByCategoryAndDisposition(t,i)}}},t={};var i=function i(s){var n=t[s];if(void 0!==n)return n.exports;var r=t[s]={exports:{}};return e[s].call(r.exports,r,r.exports,i),r.exports}(35);globalThis.getComponent=i.default})();
 /*Source Code LZString compressed, Base64 encoded 

*/