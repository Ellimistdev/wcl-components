let getComponent;(()=>{"use strict";var e={920:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(s(313)),n=s(863),r=o(s(59)),i=o(s(22)),l=new a.default(!1);function c(e,t){var s;const o=new u,a=(0,n.eventsByCategoryAndDisposition)(e,"casts","friendly");for(const e of a)"cast"===e.type&&(t&&(null===(s=e.source)||void 0===s?void 0:s.id)!==t||o.AddCastEvent(e));return o}t.default=getComponent=()=>{const e=[],t=[],s=[],o=eventFilters.actorId;for(const a of reportGroup.fights){const n=c(a,o),r=n.GetColumns();e.push(n),s.push(r),t.push(n.GetRows(r))}l.addMessage("Fight Data",e);const a=function(e){let t={};for(let s of e)t=Object.assign(Object.assign({},t),s);return t}(s);l.addMessage("Columns",a);let n=function(e){const t=new Map;return e.forEach((e=>{e.forEach((e=>{const s=`${(o=e).actorName}_${o.ability}`;var o;!function(e,t,s){let o=e.get(t);o?function(e,t){if(e.actorName===t.actorName&&e.ability===t.ability){for(const s in e){let o=e[s],a=t[s];if("string"==typeof o&&"number"==typeof a?o=parseFloat(o):"string"==typeof a&&"number"==typeof o&&(a=parseFloat(a)),"number"==typeof o&&"number"==typeof a)e[s]=o+a;else if("string"==typeof o&&"string"==typeof a){const t=parseFloat(o),n=parseFloat(a);isNaN(t)||isNaN(n)||(e[s]=t+n)}}return e}throw new Error("Row objects must have the same actorName and ability")}(o,s):o=Object.assign({},s);e.set(t,o)}(t,s,e)}))})),Array.from(t.values())}(t);e.length>1&&(n=function(e,t){var s,o;const a={};for(const e of t)for(const t in e.players){const n=e.players[t].getTotalResourcesUsed();if(a[t])for(const e in n)null!==(s=(o=a[t])[e])&&void 0!==s||(o[e]=0),a[t][e]+=n[e];else a[t]=n}for(const t of e){const e=a[t.actorName];for(const s in t){if(!s.endsWith("%"))continue;const o=s.slice(0,-1),a=t[o];if("number"==typeof a&&0!==a){const n=a/e[o];t[s]=Math.round(100*n)}}}return e}(n,e)),l.addMessage("Data Rows",n);const r={component:"Table",props:{columns:{title:{header:"Resource Usage",columns:a}},data:n}};return l.debug?l.messages:r};class u{constructor(){this.players={},this.AbilitiesUsed={}}AddCastEvent(e){var t,s,o;e.source&&"Pet"!==e.source.type&&e.ability&&(this.AbilitiesUsed[e.ability.name]=e.ability,null!==(t=(s=this.players)[o=e.source.name])&&void 0!==t||(s[o]=new d),this.players[e.source.name].AddCastEvent(e))}GetColumns(){const e={actorName:{header:"Player Name",textAlign:"center"},ability:{header:"Ability Name",textAlign:"center"},castCount:{header:"Casts",textAlign:"center"}},t=new Set;for(const e of Object.values(this.players))for(const s of Object.values(e.abilityDataByName))for(const e in s.totalResourcesUsed)t.add(e);for(const s of t)e[s]={header:s,textAlign:"center"},e[s+"%"]={header:s+"%",textAlign:"center"};return e}GetRows(e){var t;const s=[];for(const o in this.players){const a=this.players[o].getTotalResourcesUsed();for(const n in this.players[o].abilityDataByName){const r=this.players[o].abilityDataByName[n],l={actorName:o,ability:(0,i.default)(this.AbilitiesUsed[n]),castCount:r.Casts};for(const e in r.totalResourcesUsed){const t=r.totalResourcesUsed[e]?r.totalResourcesUsed[e]:0,s=a[e]?Math.round(r.totalResourcesUsed[e]/a[e]*100):0;l[e]=t,l[e+"%"]=s}for(const s in e)null!==(t=l[s])&&void 0!==t||(l[s]=0);s.push(l)}}return s}}class d{constructor(){this.abilityDataByName={}}getTotalResourcesUsed(){var e;const t={};for(const s of Object.values(this.abilityDataByName))for(const o in s.totalResourcesUsed)null!==(e=t[o])&&void 0!==e||(t[o]=0),t[o]+=s.totalResourcesUsed[o];return t}AddCastEvent(e){var t,s,o;e.ability&&(null!==(t=(s=this.abilityDataByName)[o=e.ability.name])&&void 0!==t||(s[o]=new y(e.ability.name)),this.abilityDataByName[e.ability.name].AddCastEvent(e))}}class y{constructor(e){this.totalResourcesUsed={},this.Casts=0,this.events=[],l.addMessage("CastEvents "+e,this.events),this.Name=e}AddCastEvent(e){e.sourceResources&&(this.events.push(e),this.Casts++,this.ParseClassResource(e.sourceResources))}ParseClassResource(e){var t,s;if(0!==e.resourceType&&!e.resourceType)return;const o=(0,r.default)(e.resourceType);null!==(t=(s=this.totalResourcesUsed)[o])&&void 0!==t||(s[o]=0),this.totalResourcesUsed[o]+=e.resourceCost,e.additionalResources&&this.ParseAdditionalResources(e.additionalResources)}ParseAdditionalResources(e){var t,s;if(!e.resourceType)return;const o=(0,r.default)(e.resourceType);null!==(t=(s=this.totalResourcesUsed)[o])&&void 0!==t||(s[o]=0),this.totalResourcesUsed[o]+=e.resourceAmount,e.next&&this.ParseAdditionalResources(e.next)}}},59:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const s={0:"Mana",1:"Rage",2:"Focus",3:"Energy",4:"Combo Points",5:"Runes",6:"Runic Power",7:"Soul Shards",8:"Astral Power",9:"Holy Power",10:"Alternate",11:"Maelstrom",12:"Chi",13:"Insanity",14:"Obsolete",15:"Obsolete2",16:"Arcane Charges",17:"Fury",18:"Pain",19:"Essence",20:"Rune Blood (Classic)",21:"Rune Frost (Classic)",22:"Rune Unholy (Classic)",23:"Alternate Quest",24:"Alternate Encounter",25:"Alternate Mount"};t.default=function(e){return s[e]||`${e}`}},313:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.messages=[],this.debug=e}addMessage(e,t){if(!this.debug)return;const s={};s[e]=t,this.messages.push(s)}}},22:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return`<AbilityIcon id="${e.id}" icon="${e.icon}" type="${e.type}">${e.name}</AbilityIcon>`}},863:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.allEventsByCategoryAndDisposition=t.eventsByCategoryAndDisposition=void 0,t.eventsByCategoryAndDisposition=function(e,t,s){return e.eventsByCategoryAndDisposition(t,s)},t.allEventsByCategoryAndDisposition=function(e,t,s){return e.allEventsByCategoryAndDisposition(t,s)}}},t={};var s=function s(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,s),n.exports}(920);globalThis.getComponent=s.default})();
 /*Source Code LZString compressed, Base64 encoded 

*/